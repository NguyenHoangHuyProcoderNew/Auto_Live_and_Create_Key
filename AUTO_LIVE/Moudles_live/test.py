# IMPORT C√ÅC TH∆Ø VI·ªÜN C·∫¶N THI·∫æT
import os
import time
import logging
import threading
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.by import By
from time import sleep
import telebot
import sys
from selenium.common.exceptions import NoSuchElementException
import datetime
from selenium.common.exceptions import TimeoutException
from colorama import Fore, Style, init
from telebot import types

# C·∫•u h√¨nh API telegram
API_TOKEN = '7329003333:AAF7GhjivbGnk0jSGE8XfefFh_-shHAFsGc' # Token c·ªßa BOT
bot = telebot.TeleBot(API_TOKEN)

# C·∫•u h√¨nh Chrome driver
from Moudles_support.support_chrome_driver import chromedriver_path, dir
options = Options()
options.add_argument('--log-level=3')  # V√¥ hi·ªáu h√≥a th√¥ng b√°o c·ªßa Selenium
options.add_argument(f'--user-data-dir={dir}')

service = Service(chromedriver_path)
service_log_path = os.path.devnull
service = Service(chromedriver_path, service_log_path=service_log_path)

# Nh·∫≠p ch·ª©c nƒÉng in log ra m√†n h√¨nh
from Moudles_support.print_log import log_error, log_info, log_success

# Nh·∫≠p ch·ª©c nƒÉng bot ph·∫£n h·ªìi l·∫°i ng∆∞·ªùi d√πng
from Moudles_support.support_bot import bot_reply

# ID c·ªßa ADMIN Bot
from Moudles_support.support_bot import user_id

kieulive = None
"""" Tr·ªü l·∫°i menu ch√≠nh """
def trolai_menuchinh(message):
    nut_menuchinh = telebot.types.ReplyKeyboardMarkup(True).add('M·ªü live', 'T·∫Øt live', 'ƒê·ªïi IP').add('Tr·ªü v·ªÅ menu ch√≠nh')
    bot.send_message(message.chat.id, "VUI L√íNG CH·ªåN üëá", reply_markup=nut_menuchinh)

def chon_nguon(message):
    nut_chon_nguon_chophienlive = types.ReplyKeyboardMarkup(True).add('HC CuÃÉ').add('Qu·ª≥nh Em').add('Tr·ªü l·∫°i menu ch√≠nh')
    bot.send_message(message.chat.id, "B·∫°n mu·ªën s·ª≠ d·ª•ng ngu·ªìn live n√†o cho phi√™n live?", reply_markup=nut_chon_nguon_chophienlive)
    
    bot.register_next_step_handler(message, xuly_chonnguon)

def xuly_chonnguon(message):
    global linknguon
    if message.text == "HC CuÃÉ":
        linknguon = "hoi chieu cu"
    elif message.text == "Qu·ª≥nh Em":
        linknguon = "quynhem_chui"
    elif message.text == "Tr·ªü l·∫°i menu ch√≠nh":
        log_info(f"Ng∆∞·ªùi d√πng ƒë√£ ch·ªçn Tr·ªü l·∫°i menu ch√≠nh")
        trolai_menuchinh(message)
        return
    else:
        bot_reply(user_id, "L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá")
        trolai_menuchinh(message)
        log_error("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá - tr·ªü v·ªÅ menu ch√≠nh")
        return
    
    # Sau khi ch·ªçn ngu·ªìn, chuy·ªÉn sang b∆∞·ªõc ch·ªçn ki·ªÉu live
    chon_kieulive(message)

def chon_kieulive(message):
    nut_chon_kieulive = types.ReplyKeyboardMarkup(True).add('Ki·ªÉu live Mobile').add('Ki·ªÉu live Studio V3').add('Tr·ªü l·∫°i menu ch√≠nh')
    bot.send_message(message.chat.id, "B·∫°n mu·ªën s·ª≠ d·ª•ng ki·ªÉu live n√†o cho phi√™n live?", reply_markup=nut_chon_kieulive)

    bot.register_next_step_handler(message, xuly_chonkieulive) 

def xuly_chonkieulive(message):
    global kieulive
    if message.text == "Ki·ªÉu live Mobile":
        kieulive = "#formLive > div:nth-child(6) > div > div > div > button.h-60.w-60.radius-6.btn-live-type.btn-icon.cur-point.m-r-15.pricing-box-active"
    elif message.text == "Ki·ªÉu live Studio V3":
        kieulive = "#live_studio_v3"
    elif message.text == "Tr·ªü l·∫°i menu ch√≠nh":
        log_info(f"Ng∆∞·ªùi d√πng ƒë√£ ch·ªçn Tr·ªü l·∫°i menu ch√≠nh")
        trolai_menuchinh(message)
        return
    else:
        bot_reply(user_id, "L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá")
        trolai_menuchinh(message)
        return

    # Sau khi ch·ªçn ki·ªÉu live, th·ª±c hi·ªán c√°c thao t√°c ti·∫øp theo
    bot_reply(user_id, f"Ki·ªÉu live: {kieulive}")
    bot_reply(user_id, f"Ngu·ªìn live: {linknguon}")
